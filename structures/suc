suc:ab(a) x a -> a
suc(t,x) =
	if nil?(t) then
		undefined
	else
		if raiz(t) = x then
			min(der(t))
		else
			if raiz(t) > x then
				if suc(izq(t),x) != undefined then
					suc(izq(t),x)
				else
					raiz(t)
				fi
			else
				suc(der(t),x)
			fi
		fi
	fi
min:ab(a) -> a
min(t) = 
	if nil?(t) then
		undefined
	else
		if nil?(izq(t)) then
			raiz(t)
		else
			min(izq(t))
		fi
	fi

gSuc:ab(a) x boolean x a x a -> a
gSuc(t,c,x,r) =
	if c then
		gSuc(t,false,x,suc(t,x))
	else
		if raiz(t) > x then
			if r != undefined
				r
			else
				raiz(t)
			fi
		else
			r
		fi
	fi 
	=
	if c then
		gSuc(t,false,x,suc(t,x)) = 
		if nil?(t) then
			gSuc(t,false,x,undefined)
		else
			if raiz(t) = x then
				gSuc(t,false,x, min(der(t)))
			else
				if raiz(t) > x then
					if suc(izq(t),x) != undefined then
						suc(izq(t),x)
					else
						raiz(t)
					fi =
					gSuc(t,false,x,suc(izq(t),x)) =
					gSuc(t,false,x, gSuc(izq(t), true, x, r))
					
				else
					gSuc(t,false,x,suc(der(t),x)) =
					gSuc(t,false,x,gSuc(der(t),true,x,r))
				fi
			fi
		fi
	else
		if !nil?(t) && raiz(t) > x then
			if r != undefined
				r
			else
				raiz(t)
			fi
		else
			r
		fi
	fi
 =
 gSuc(t,c,x,r) = 
 	if c then		 
		if nil?(t) then
			gSuc(t,false,x,undefined)
		else
			if raiz(t) = x then
				gSuc(t,false,x, min(der(t)))
			else
				if raiz(t) > x then					
					gSuc(t,false,x, gSuc(izq(t), true, x, r))					
				else					
					gSuc(t,false,x,gSuc(der(t),true,x,r))
				fi
			fi
		fi
	else
		if raiz(t) > x then
			if r != undefined
				r
			else
				raiz(t)
			fi
		else
			r
		fi
	fi
	
ggSuc:pila(<ab(a) x boolean>) x a x a -> a
ggSuc(p,x,r) =
	if vacia?(p) then
		r
	else
		ggSuc(desapilar(p),x,gSuc(pi1(top(p)),pi2(top(p)),x,r))
	fi
	=
	if vacia?(p) then
		r
	else
		ggSuc(desapilar(p),x,gSuc(pi1(top(p)),pi2(top(p)),x,r) =
		if pi2(top(p)) then		 
			if nil?(pi1(top(p))) then
				ggSuc(desapilar(p),x,gSuc(pi1(top(p)),false,x,undefined)) =
				ggSuc(apilar(<pi1(top(p)),false>,desapilar(p)),x,undefined)				
			else
				if raiz(pi1(top(p))) = x then
					ggSuc(desapilar(p),x,gSuc(pi1(top(p)),false,x, min(der(top(p))))) =
					ggSuc(apilar(<pi1(top(p)),false>,desapilar(p)),x, min(der(top(p))))
				else
					if raiz(pi1(top(p))) > x then					
						ggSuc(desapilar(p),x,gSuc(pi1(top(p)),false,x, gSuc(izq(pi1(top(p))), true, x, r)))=
						ggSuc(apilar(<pi1(top(p)),false>,desapilar(p)),x,gSuc(izq(pi1(top(p))), true, x, r))) =
						ggSuc(apilar(<izq(pi1(top(p))),true>,<pi1(top(p)),false>,desapilar(p)),x,r)					
					else					
						ggSuc(despilar(p),x,gSuc(pi1(top(p)),false,x,gSuc(der(pi1(top(p))),true,x,r))) =
						ggSuc(apilar(<pi1(top(p)),false>,desapilar(p)),x,gSuc(der(pi1(top(p))),true,x,r)) =
						ggSuc(apilar(<der(pi1(top(p))),true>,<pi1(top(p)),false>,desapilar(p)),x,r) 
					fi
				fi
			fi
		else
			if raiz(top(p)) > x then
				if r != undefined then
					ggSuc(desapilar(p),x,r)
				else
					ggSuc(desapilar(p),x,raiz(pi1(top(p))))				
				fi
			else
				ggSuc(desapilar(p),x,r)
			fi
		fi
	fi
	=
	if vacia?(p) then
		r
	else		
		if pi2(top(p)) then		 
			if nil?(pi1(top(p))) then		
				ggSuc(apilar(<pi1(top(p)),false>,desapilar(p)),x,undefined)				
			else
				if raiz(pi1(top(p))) = x then					
					ggSuc(apilar(<pi1(top(p)),false>,desapilar(p)),x, min(der(top(p))))
				else
					if raiz(pi1(top(p))) > x then						
						ggSuc(apilar(<izq(pi1(top(p))),true>,<pi1(top(p)),false>,desapilar(p)),x,r)					
					else					
						ggSuc(apilar(<der(pi1(top(p))),true>,<pi1(top(p)),false>,desapilar(p)),x,r) 
					fi
				fi
			fi
		else
			if raiz(top(t)) > x then
				if r != undefined then
					ggSuc(desapilar(p),x,r)
				else
					ggSuc(desapilar(p),x,raiz(pi1(top(p))))				
				fi
			else
				ggSuc(desapilar(p),x,r)
			fi
		fi
	fi
	
iGGSuc(t,x) =
	p= apilar(<t,true>,[])
	r= undefined
	while !vacia?(p) do
		top= desapilar(p)
		if pi2(top) then		 
			if nil?(pi1(top)) then		
				p=apilar(<pi1(top),false>,p)
				r= undefined				
			else
				if raiz(pi1(top)) = x then					
					p= apilar(<pi1(top),false>,p)
					r= min(der(top))
				else
					if raiz(pi1(top)) > x then						
						p=apilar(<izq(pi1(top)),true>,<pi1(top),false>,p)					
					else					
						p= apilar(<der(pi1(top)),true>,<pi1(top),false>,p) 
					fi
				fi
			fi
		else
			if raiz(pi1(top)) > x then
				if r = undefined then
					r= raiz(pi1(top))				
				fi
			fi
		fi
	od
	return r