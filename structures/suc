suc:ab(a) x a -> <a x bool>
suc(t,x) =
	if nil?(t) then
		<undefined,false>
	else
		if raiz(t) = x then
			<min(der(t)),true>
		else
			if raiz(t) > x then
				if suc(izq(t),x) != undefined then
					suc(izq(t),x)
				else
					if pi2(suc(izq(t))) then
						<raiz(t),true>
					else
						<undefined,false>
					fi
				fi
			else
				suc(der(t),x)
			fi
		fi
	fi =
suc(t,x) =
	if nil?(t) then
		<undefined,false>
	else
		if raiz(t) = x then
			<min(der(t)),true>
		else
			if raiz(t) > x then
				f(suc(izq(t),x),raiz(t))				
			else
				suc(der(t),x)
			fi
		fi
	fi 
f:<a x boolean> x a -> <a x boolean>
f(r,x) = 
	if pi1(r) != undefined then
		r
	else
		if pi2(r) then
			<x,true>
		else
			<undefined,false>
		fi
	fi
	
min:ab(a) -> a
min(t) = 
	if nil?(t) then
		undefined
	else
		if nil?(izq(t)) then
			raiz(t)
		else
			min(izq(t))
		fi
	fi

gSuc:pila(ab(a)) x boolean x a x < a x boolean> -> <a x boolean>
gSuc(p,b,x,r) =
	if vacia?(p) then
		r
	else
		if b then
			if not nil?(top(p)) then
				gSuc(desapilar(p),true,x, f(r,raiz(top(p))))
			fi
		else
			gSuc(desapilar(p),true,x,suc(top(p),x))
		fi
	fi = 
	if vacia?(p) then
		r
	else
		if b then
			if not nil?(top(p)) then
				gSuc(desapilar(p),true,x, f(r,raiz(top(p))))
			fi
		else
			gSuc(desapilar(p),true,x,suc(top(p),x)) = 
			if nil?(top(p)) then
				gSuc(desapilar(p), true, x, <undefined, false>)
			else
				if raiz(t) = x then
					gSuc(despilar(p), true, x,<min(der(top(p))),true>)
				else
					if raiz(t) > x then
						gSuc(desapilar(p), true, x, f(suc(izq(top(p)),x),raiz(top(p))) ) =
						gSuc(p, true, x, suc(izq(top(p)))) =
						gSuc(apilar(izq(top(p)),p), false, x, r)						
					else
						gSuc(desapilar(p), true, x, suc(der(top(p)),x)) =
						gSuc(apilar(der(top(p)),desapilar(p)),false,x,r)
					fi
				fi
			fi
				
		fi
	fi
	if vacia?(p) then
		r
	else
		if b then
			if not nil?(top(p)) then
				gSuc(desapilar(p),true,x, f(r,raiz(top(p))))
			fi
		else
			gSuc(desapilar(p),true,x,suc(top(p),x)) = 
			if nil?(top(p)) then
				gSuc(desapilar(p), true, x, <undefined, false>)
			else
				if raiz(t) = x then
					gSuc(despilar(p), true, x,<min(der(top(p))),true>)
				else
					if raiz(t) > x then						
						gSuc(apilar(izq(top(p)),p), false, x, r)						
					else						
						gSuc(apilar(der(top(p)),desapilar(p)),false,x,r)
					fi
				fi
			fi
				
		fi
	fi
	
	gSuc(apilar(t,[]), false, x, <undefined,false>)
	
	iGSuc(t,x)
		p= apilar(t,[])
		b= false
		r= <undefined,false>
		while not vacia?(p)
			a= desapilar(p)
			if b then
				if not nil?(a) then
					b= true
					r= f(r,raiz(a)))
				fi
			else				 
				if nil?(a) then
					b= true
					r= <undefined, false>
				else
					if raiz(a) = x then
						b= true
						r= <min(der(top(p))),true>
					else
						if raiz(a) > x then	
							p= apilar(a,p)					
							p= apilar(izq(a),p)
							b= false						
						else						
							p= apilar(der(a),p)
							b= false
						fi
					fi
				fi
				
			fi
		end while	
		return r
	
		
	